from aiogram import F, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy import select, update

from app.greeter_bots.keyboards.captcha_menu import captcha_menu_keyboard
from app.greeter_bots.keyboards.channel_settings import channel_settings_keyboard
from app.database.base.session import async_session
from app.database.models.channel import Channel
from app.utils.logger import logger
from app.redis_queue.admin_logs import send_log_to_admin  # <-- –º–µ–Ω—è–π –ø—É—Ç—å –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.

class CaptchaTextState(StatesGroup):
    waiting_for_text = State()

class CaptchaButtonState(StatesGroup):
    waiting_for_button_text = State()


def get_router() -> Router:
    router = Router()

    async def get_channel_by_id(channel_id: int | str):
        async with async_session() as session:
            result = await session.execute(
                select(Channel).where(Channel.id == int(channel_id))
            )
            return result.scalars().first()

    async def update_channel_field(channel_id: int, field: str, value):
        async with async_session() as session:
            await session.execute(
                update(Channel).where(Channel.id == int(channel_id)).values({field: value})
            )
            await session.commit()

    @router.callback_query(F.data.startswith("captcha_menu:"))
    async def open_captcha_menu(callback: types.CallbackQuery):
        channel_id = int(callback.data.split(":")[1])
        channel = await get_channel_by_id(channel_id)

        if not channel:
            await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            log_text = (
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) "
                f"–ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∫–∞–ø—á–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞ ID={channel_id}"
            )
            await send_log_to_admin(log_text, level="warning")
            logger.warning(log_text)
            return

        log_text = (
            f"üß© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) "
            f"–æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –∫–∞–ø—á–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ID={channel_id}"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

        await callback.message.edit_text(
            text=(
                f"üß© <b>–ö–∞–ø—á–∞ –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è</b>\n\n"
                f"üìå <i>–≠—Ç–æ –≤–æ–≤–ª–µ–∫–∞—é—â–∏–π –º–µ—Ö–∞–Ω–∏–∑–º: –ø–µ—Ä–µ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π.</i>\n"
                f"–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É ‚Äî –æ–Ω –∫–∞–∫ –±—ã ¬´–ø—Ä–æ—Ö–æ–¥–∏—Ç –∫–∞–ø—á—É¬ª, –∏ –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é (–æ–±—Ö–æ–¥–∏—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram).\n\n"
                f"‚öôÔ∏è <b>–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:</b>\n"
                f"‚Äî –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–ø—á–∏\n"
                f"‚Äî –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏\n"
                f"‚Äî –ö–Ω–æ–ø–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–Ø –Ω–µ —Ä–æ–±–æ—Ç¬ª)\n"
                f"üì® –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏ –±–æ—Ç —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞—Å—Å—ã–ª–∫–∏."
            ),
            reply_markup=captcha_menu_keyboard(
                channel_id=channel.id,
                is_enabled=channel.captcha_enabled,
                has_button=channel.captcha_has_button
            )
        )

        await callback.answer()

    @router.callback_query(F.data.startswith("toggle_captcha:"))
    async def toggle_captcha_handler(callback: types.CallbackQuery):
        channel_id = int(callback.data.split(":")[1])
        channel = await get_channel_by_id(channel_id)
        if not channel:
            await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            log_text = (
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) "
                f"–ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–∞–ø—á—É –≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–∞–Ω–∞–ª–µ ID={channel_id}"
            )
            await send_log_to_admin(log_text, level="warning")
            logger.warning(log_text)
            return

        new_status = not channel.captcha_enabled
        await update_channel_field(channel.id, "captcha_enabled", new_status)

        await callback.message.edit_reply_markup(
            reply_markup=captcha_menu_keyboard(channel.id, new_status, channel.captcha_has_button)
        )
        await callback.answer(f"–ö–∞–ø—á–∞ {'–≤–∫–ª—é—á–µ–Ω–∞' if new_status else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")

        log_text = (
            f"‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) "
            f"–ø–µ—Ä–µ–∫–ª—é—á–∏–ª –∫–∞–ø—á—É: {'–≤–∫–ª—é—á–∏–ª' if new_status else '–≤—ã–∫–ª—é—á–∏–ª'} (channel_id={channel.id})"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

    @router.callback_query(F.data.startswith("edit_captcha_text:"))
    async def edit_captcha_text_handler(callback: types.CallbackQuery, state: FSMContext):
        channel_id = int(callback.data.split(":")[1])
        await state.update_data(channel_id=channel_id)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–∞–ø—á–∏:")
        await state.set_state(CaptchaTextState.waiting_for_text)

        log_text = (
            f"‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) "
            f"–Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–∞–ø—á–∏ (channel_id={channel_id})"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

    @router.message(CaptchaTextState.waiting_for_text)
    async def process_captcha_text(message: types.Message, state: FSMContext):
        data = await state.get_data()
        channel_id = data["channel_id"]
        await update_channel_field(channel_id, "captcha_text", message.text)
        await message.answer("–¢–µ–∫—Å—Ç –∫–∞–ø—á–∏ –æ–±–Ω–æ–≤–ª—ë–Ω!")

        channel = await get_channel_by_id(channel_id)
        await message.answer(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—á–∏:",
            reply_markup=captcha_menu_keyboard(channel.id, channel.captcha_enabled, channel.captcha_has_button)
        )
        await state.clear()

        log_text = (
            f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} (ID: {message.from_user.id}) "
            f"–æ–±–Ω–æ–≤–∏–ª —Ç–µ–∫—Å—Ç –∫–∞–ø—á–∏ (channel_id={channel_id}): '{message.text}'"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

    @router.callback_query(F.data.startswith("edit_captcha_button:"))
    async def edit_captcha_button_handler(callback: types.CallbackQuery, state: FSMContext):
        channel_id = int(callback.data.split(":")[1])
        await state.update_data(channel_id=channel_id)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∫–∞–ø—á–∏:")
        await state.set_state(CaptchaButtonState.waiting_for_button_text)

        log_text = (
            f"‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) "
            f"–Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∫–∞–ø—á–∏ (channel_id={channel_id})"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

    @router.message(CaptchaButtonState.waiting_for_button_text)
    async def process_captcha_button_text(message: types.Message, state: FSMContext):
        data = await state.get_data()
        channel_id = data["channel_id"]
        button_text = message.text

        await update_channel_field(channel_id, "captcha_button_text", button_text)
        await update_channel_field(channel_id, "captcha_has_button", bool(button_text))

        await message.answer("–ö–Ω–æ–ø–∫–∞ –∫–∞–ø—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        channel = await get_channel_by_id(channel_id)
        await message.answer(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—á–∏:",
            reply_markup=captcha_menu_keyboard(channel.id, channel.captcha_enabled, channel.captcha_has_button)
        )
        await state.clear()

        log_text = (
            f"üîò –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} (ID: {message.from_user.id}) "
            f"–æ–±–Ω–æ–≤–∏–ª –∫–Ω–æ–ø–∫—É –∫–∞–ø—á–∏ (channel_id={channel_id}): '{button_text}'"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

    @router.callback_query(F.data.startswith("delete_captcha_button:"))
    async def delete_captcha_button_handler(callback: types.CallbackQuery):
        channel_id = int(callback.data.split(":")[1])
        channel = await get_channel_by_id(channel_id)
        if not channel:
            await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        await update_channel_field(channel_id, "captcha_button_text", None)
        await update_channel_field(channel_id, "captcha_has_button", False)
        await callback.message.answer("–ö–Ω–æ–ø–∫–∞ –∫–∞–ø—á–∏ —É–¥–∞–ª–µ–Ω–∞.")

        channel = await get_channel_by_id(channel_id)
        await callback.message.answer(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—á–∏:",
            reply_markup=captcha_menu_keyboard(channel.id, channel.captcha_enabled, channel.captcha_has_button)
        )

        log_text = (
            f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) "
            f"—É–¥–∞–ª–∏–ª –∫–Ω–æ–ø–∫—É –∫–∞–ø—á–∏ (channel_id={channel_id})"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

    @router.callback_query(F.data.startswith("preview_captcha:"))
    async def preview_captcha_handler(callback: types.CallbackQuery):
        channel_id = int(callback.data.split(":")[1])
        channel = await get_channel_by_id(channel_id)
        if not channel:
            await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        text = channel.captcha_text or "–ü—Ä–∏–º–µ—Ä –∫–∞–ø—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

        if channel.captcha_has_button and channel.captcha_button_text:
            reply_markup = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=channel.captcha_button_text)]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        else:
            reply_markup = None

        await callback.message.answer(text=text, reply_markup=reply_markup)

        log_text = (
            f"üëÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) "
            f"–ø–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–µ–≤—å—é –∫–∞–ø—á–∏ (channel_id={channel_id})"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

    @router.callback_query(F.data.startswith("channel_settings:"))
    async def back_to_channel_settings(callback: types.CallbackQuery):
        channel_id = int(callback.data.split(":")[1])
        channel = await get_channel_by_id(channel_id)

        if not channel:
            await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            log_text = (
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) "
                f"–ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞ ID={channel_id}"
            )
            await send_log_to_admin(log_text, level="warning")
            logger.warning(log_text)
            return

        await callback.message.edit_reply_markup(
            reply_markup=channel_settings_keyboard(channel)
        )
        await callback.answer()

        log_text = (
            f"üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) "
            f"–≤–µ—Ä–Ω—É–ª—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ (channel_id={channel_id})"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

    return router
