import logging
from aiogram import Router, types, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select, update

from app.database.base.session import async_session
from app.database.models.channel import Channel
from app.greeter_bots.keyboards.autoapprove_menu import autoapprove_keyboard
from app.redis_queue.admin_logs import send_log_to_admin
from app.utils.logger import logger

class AutoApproveState(StatesGroup):
    waiting_for_seconds = State()


def get_router(bot_id: int) -> Router:
    router = Router()

    @router.callback_query(F.data.startswith("autoapprove_menu:"))
    async def show_autoapprove_menu(callback: types.CallbackQuery):
        channel_id = int(callback.data.split(":")[1])

        async with async_session() as session:
            result = await session.execute(
                select(Channel).where(Channel.id == channel_id, Channel.bot_id == bot_id)
            )
            channel = result.scalar_one_or_none()

        if not channel:
            await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await send_log_to_admin(
                f"‚ùå –ö–∞–Ω–∞–ª ID {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏—è", level="warning"
            )
            logger.warning(f"‚ùå –ö–∞–Ω–∞–ª ID {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏—è")
            return

        log_text = (
            f"‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) –æ—Ç–∫—Ä—ã–ª –∞–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ "
            f"–¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel.channel_name} (ID: {channel.channel_id}) | —Ä–µ–∂–∏–º: {channel.auto_approve_mode or '–ù–µ—Ç'}"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

        await callback.message.edit_text(
            text=(
                f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–æ–∫</b>\n\n"
                f"üìå <i>–ï—Å–ª–∏ –∫–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç—ã–π –∏ —Ç—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ ‚Äî –≤—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.</i>\n\n"
                f"‚öôÔ∏è <b>–í–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n"
                f"‚Äî <b>–ù–µ—Ç</b> ‚Äî –∑–∞—è–≤–∫–∏ –Ω–µ –æ–¥–æ–±—Ä—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
                f"‚Äî <b>–°—Ä–∞–∑—É</b> ‚Äî –æ–¥–æ–±—Ä—è—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ\n"
                f"‚Äî <b>–ß–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É</b> ‚Äî –æ–¥–æ–±—Ä–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 1 –º–∏–Ω—É—Ç–∞\n"
                f"‚Äî <b>–ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç</b> ‚Äî –æ–¥–æ–±—Ä–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 5 –º–∏–Ω—É—Ç\n"
                f"‚Äî <b>–£–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é</b> ‚Äî –∑–∞–¥–∞—Ç—å —Å–≤–æ—ë –≤—Ä–µ–º—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)\n\n"
                f"üõ† –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: <b>{channel.auto_approve_mode or '–ù–µ—Ç'}</b>"
            ),
            reply_markup=autoapprove_keyboard(channel.auto_approve_mode or "none", channel_id)
        )

    @router.callback_query(F.data.startswith("set_autoapprove:"))
    async def set_autoapprove(callback: types.CallbackQuery):
        _, mode, channel_id = callback.data.split(":")
        channel_id = int(channel_id)

        async with async_session() as session:
            await session.execute(
                update(Channel)
                .where(Channel.id == channel_id, Channel.bot_id == bot_id)
                .values(auto_approve_mode=mode)
            )
            await session.commit()

        log_text = (
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) "
            f"—É—Å—Ç–∞–Ω–æ–≤–∏–ª –∞–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ: {mode} –¥–ª—è –∫–∞–Ω–∞–ª–∞ ID {channel_id}"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

        await callback.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ!")
        await callback.message.edit_reply_markup(
            reply_markup=autoapprove_keyboard(mode, channel_id)
        )

    @router.callback_query(F.data.startswith("custom_autoapprove:"))
    async def ask_custom_seconds(callback: types.CallbackQuery, state: FSMContext):
        channel_id = int(callback.data.split(":")[1])
        await state.set_state(AutoApproveState.waiting_for_seconds)
        await state.update_data(channel_id=channel_id)
        await callback.message.answer("‚åõ –í–≤–µ–¥–∏—Ç–µ, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –Ω—É–∂–Ω–æ –æ–¥–æ–±—Ä—è—Ç—å –∑–∞—è–≤–∫–∏:")

        log_text = (
            f"‚åõ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) –≤—ã–±—Ä–∞–ª —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º "
            f"–∞–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ ID {channel_id}"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

    @router.message(AutoApproveState.waiting_for_seconds)
    async def save_custom_delay(message: types.Message, state: FSMContext):
        data = await state.get_data()
        channel_id = data["channel_id"]

        try:
            seconds = int(message.text.strip())
            if seconds <= 0 or seconds > 86400:
                raise ValueError
        except ValueError:
            await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –æ—Ç 1 –¥–æ 86400")
            return

        async with async_session() as session:
            await session.execute(
                update(Channel)
                .where(Channel.id == channel_id, Channel.bot_id == bot_id)
                .values(auto_approve_mode=f"{seconds}s")
            )
            await session.commit()

        log_text = (
            f"üïí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} (ID: {message.from_user.id}) "
            f"—É—Å—Ç–∞–Ω–æ–≤–∏–ª –∞–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ: {seconds} —Å–µ–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ID {channel_id}"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data=f"channel_settings:{channel_id}")

        await message.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {seconds} —Å–µ–∫—É–Ω–¥ –¥–æ –∞–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏—è.", reply_markup=builder.as_markup())
        await state.clear()

    return router
