from aiogram import types, Router, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import select

from app.database.base.session import async_session
from app.database.models.channel import Channel
from app.greeter_bots.keyboards.channel_settings import channel_settings_keyboard
from app.utils.logger import logger
from app.redis_queue.admin_logs import send_log_to_admin


def get_router() -> Router:
    router = Router()

    CHANNELS_LIST_TEXT = "üìã –¢–≤–æ–∏ –∫–∞–Ω–∞–ª—ã:"

    async def send_channels_list(callback: types.CallbackQuery, bot_id: int):
        async with async_session() as session:
            result = await session.execute(select(Channel).where(Channel.bot_id == bot_id))
            channels = result.scalars().all()

        if not channels:
            logger.info(f"üì≠ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{callback.from_user.username} (ID: {callback.from_user.id}) –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ (bot_id={bot_id})")
            await send_log_to_admin(
                f"üì≠ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{callback.from_user.id}</code> –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ (bot_id={bot_id})"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
            ])
            await callback.message.edit_text("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤.", reply_markup=keyboard)
        else:
            logger.info(f"üìã –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{callback.from_user.username} (ID: {callback.from_user.id})")
            await send_log_to_admin(
                f"üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{callback.from_user.id}</code> –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (bot_id={bot_id})"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=ch.channel_name or ch.channel_id,
                    callback_data=f"channel_menu:{ch.id}"
                )] for ch in channels
            ] + [
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
            ])
            await callback.message.edit_text(CHANNELS_LIST_TEXT, reply_markup=keyboard)

    @router.callback_query(F.data == "my_channels")
    async def show_my_channels(callback: types.CallbackQuery, bot_id: int):
        await send_channels_list(callback, bot_id)
        await callback.answer()

    @router.callback_query(F.data == "back_to_channels_menu")
    async def back_to_channels_menu(callback: types.CallbackQuery, bot_id: int):
        await send_channels_list(callback, bot_id)
        await callback.answer()

    @router.callback_query(F.data.startswith("channel_menu:"))
    async def open_channel_menu(callback: types.CallbackQuery, bot_id: int):
        channel_id = int(callback.data.split(":")[1])

        async with async_session() as session:
            result = await session.execute(
                select(Channel).where(Channel.id == channel_id, Channel.bot_id == bot_id)
            )
            channel = result.scalar_one_or_none()

        if not channel:
            await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            logger.warning(
                f"‚ùå –ö–∞–Ω–∞–ª ID {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{callback.from_user.username} (ID: {callback.from_user.id})"
            )
            await send_log_to_admin(
                f"‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª <code>{channel_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (bot_id={bot_id})"
            )
            return

        logger.info(
            f"‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ "
            f"{channel.channel_name or channel.channel_id} (ID: {channel_id})"
        )
        await send_log_to_admin(
            f"‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{callback.from_user.id}</code> –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ <b>{channel.channel_name}</b> (ID: {channel.channel_id})"
        )

        await callback.message.edit_text(
            f"<b>‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞: <u>{channel.channel_name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</u></b>\n\n"
            "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:\n\n"
            "‚Ä¢ <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –∫–∞–Ω–∞–ª\n"
            "‚Ä¢ <b>–ê–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ</b> ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏–π –∑–∞—è–≤–æ–∫ –≤ –∫–∞–Ω–∞–ª\n"
            "‚Ä¢ <b>–ö–∞–ø—á–∞</b> ‚Äî –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —á–µ–ª–æ–≤–µ–∫ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –±–∞–∑—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫\n"
            "‚Ä¢ <b>–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª</b> ‚Äî —É–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ –±–æ—Ç–∞ –∏ –±–∞–∑—ã\n"
            "‚Ä¢ <b>–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤",
            reply_markup=channel_settings_keyboard(channel)
        )

        await callback.answer()

    return router
