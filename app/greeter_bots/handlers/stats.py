from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select, func
from datetime import datetime, timezone, timedelta

from app.database.base.session import async_session
from app.database.models import ChannelMember
from app.database.models.channel import Channel
from app.utils.logger import logger
from app.redis_queue.admin_logs import send_log_to_admin


def get_router(bot_id: int) -> Router:
    router = Router()

    @router.callback_query(F.data == "stats")
    async def stats_menu(callback: CallbackQuery):
        async with async_session() as session:
            result = await session.execute(
                select(Channel).where(Channel.bot_id == bot_id)
            )
            channels = result.scalars().all()

        logger.info(
            f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (bot_id={bot_id})"
        )
        await send_log_to_admin(
            f"üìä <code>{callback.from_user.id}</code> –æ—Ç–∫—Ä—ã–ª <b>—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</b> Greeter-–±–æ—Ç–∞ (bot_id={bot_id})"
        )

        if not channels:
            await callback.message.edit_text("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
            return

        keyboard = [
            [InlineKeyboardButton(
                text=channel.channel_name or f"–ö–∞–Ω–∞–ª {channel.channel_id}",
                callback_data=f"stats:{channel.id}"
            )] for channel in channels
        ]
        keyboard.append([InlineKeyboardButton(text="üì¢ –í—Å–µ –∫–∞–Ω–∞–ª—ã", callback_data="stats:all")])
        keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")])

        await callback.message.edit_text(
            "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback.answer()

    @router.callback_query(F.data.startswith("stats:"))
    async def stats_handler(callback: CallbackQuery):
        _, channel_id_raw = callback.data.split(":")

        async with async_session() as session:
            result = await session.execute(
                select(Channel).where(Channel.bot_id == bot_id)
            )
            channels = result.scalars().all()
            available_channel_ids = [c.id for c in channels]

            if channel_id_raw == "all":
                selected_channels = channels
                channel_ids = available_channel_ids
                channel_label = "–≤—Å–µ—Ö –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤"

                logger.info(
                    f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º (bot_id={bot_id})"
                )
                await send_log_to_admin(
                    f"üìä <code>{callback.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª <b>—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º</b> (bot_id={bot_id})"
                )

                total_subscribers = 0
                failed_channels = []

                for ch in selected_channels:
                    try:
                        chat = await callback.bot.get_chat(ch.channel_id)
                        count = await callback.bot.get_chat_member_count(chat.id)
                        total_subscribers += count
                    except Exception:
                        failed_channels.append(ch.channel_name or f"ID {ch.channel_id}")

                total_subscribers_text = (
                    f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö: <b>{total_subscribers}</b>\n"
                    if total_subscribers else
                    "üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å</i>\n"
                )
                if failed_channels:
                    total_subscribers_text += f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑: {', '.join(failed_channels)}\n"
            else:
                channel_id = int(channel_id_raw)
                if channel_id not in available_channel_ids:
                    await callback.answer("üö´ –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞.", show_alert=True)
                    return

                selected_channel = next((c for c in channels if c.id == channel_id), None)
                selected_channels = [selected_channel]
                channel_ids = [channel_id]

                logger.info(
                    f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª—É {selected_channel.channel_name} (bot_id={bot_id})"
                )
                await send_log_to_admin(
                    f"üìä <code>{callback.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª <b>—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</b> –ø–æ –∫–∞–Ω–∞–ª—É <b>{selected_channel.channel_name}</b> (bot_id={bot_id})"
                )

                try:
                    chat = await callback.bot.get_chat(selected_channel.channel_id)
                    count = await callback.bot.get_chat_member_count(chat.id)
                    total_subscribers_text = f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ: <b>{count}</b>\n"
                except Exception:
                    total_subscribers_text = "üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å</i>\n"

                channel_label = f"–∫–∞–Ω–∞–ª–∞ <b>{selected_channel.channel_name}</b>"

            now = datetime.now(timezone.utc)
            today_start = now.replace(hour=0, minute=0, second=0, microsecond=0)
            week_ago = now - timedelta(days=7)
            month_ago = now - timedelta(days=30)

            known_users = await session.scalar(
                select(func.count()).where(ChannelMember.channel_id.in_(channel_ids))
            )
            broadcastable = await session.scalar(
                select(func.count()).where(
                    ChannelMember.channel_id.in_(channel_ids),
                    ChannelMember.is_available_for_broadcast.is_(True)
                )
            )
            new_today = await session.scalar(
                select(func.count()).where(
                    ChannelMember.channel_id.in_(channel_ids),
                    ChannelMember.joined_at >= today_start
                )
            )
            new_week = await session.scalar(
                select(func.count()).where(
                    ChannelMember.channel_id.in_(channel_ids),
                    ChannelMember.joined_at >= week_ago
                )
            )
            new_month = await session.scalar(
                select(func.count()).where(
                    ChannelMember.channel_id.in_(channel_ids),
                    ChannelMember.joined_at >= month_ago
                )
            )

            text = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {channel_label}</b>\n\n"
                f"{total_subscribers_text}"
                f"ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å –∫–µ–º –±–æ—Ç —É–∂–µ –∑–Ω–∞–∫–æ–º: <b>{known_users}</b>\n"
                f"üì¢ –ò–∑ –Ω–∏—Ö –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: <b>{broadcastable}</b>\n\n"
                f"üìÖ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <b>{new_today}</b>\n"
                f"üóì –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: <b>{new_week}</b>\n"
                f"üìà –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: <b>{new_month}</b>\n"
            )

            builder = InlineKeyboardBuilder()
            builder.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="stats")

            await callback.message.edit_text(text, reply_markup=builder.as_markup())
            await callback.answer()

    return router
