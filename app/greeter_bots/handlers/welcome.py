from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select, update

from app.database.base.session import async_session
from app.database.models.channel import Channel
from app.greeter_bots.states.welcome import WelcomeState
from app.greeter_bots.keyboards.welcome_menu import welcome_menu_keyboard
from app.utils.logger import logger
from app.redis_queue.admin_logs import send_log_to_admin  # –ø–æ–ø—Ä–∞–≤—å, –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–æ–µ

def get_router() -> Router:
    router = Router()

    @router.callback_query(F.data.startswith("welcome_menu:"))
    async def show_welcome_menu(callback: types.CallbackQuery):
        channel_id = int(callback.data.split(":")[1])
        async with async_session() as session:
            result = await session.execute(select(Channel).where(Channel.id == channel_id))
            channel = result.scalar_one()

        log_text = (
            f"üëã @{callback.from_user.username} (ID: {callback.from_user.id}) –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è "
            f"–¥–ª—è –∫–∞–Ω–∞–ª–∞ ID={channel_id}"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

        await callback.message.edit_text(
            f"üí¨ <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> –¥–ª—è –∫–∞–Ω–∞–ª–∞ <b>{channel.channel_name}</b>\n\n"
            f"üìå <i>–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∏–ª–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.</i>\n\n"
            f"‚öôÔ∏è <b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:</b>\n"
            f"‚Äî –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è\n"
            f"‚Äî –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è\n"
            f"‚Äî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é (inline –∏–ª–∏ reply)\n"
            f"‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–º–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n",
            reply_markup=welcome_menu_keyboard(channel.id, channel.welcome_enabled)
        )
        await callback.answer()

    @router.callback_query(F.data.startswith("toggle_welcome:"))
    async def toggle_welcome(callback: types.CallbackQuery):
        channel_id = int(callback.data.split(":")[1])
        async with async_session() as session:
            result = await session.execute(select(Channel).where(Channel.id == channel_id))
            channel = result.scalar_one()
            channel.welcome_enabled = not channel.welcome_enabled
            await session.commit()

        status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if channel.welcome_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
        log_text = (
            f"üîÅ @{callback.from_user.username} (ID: {callback.from_user.id}) "
            f"—Å–º–µ–Ω–∏–ª welcome_enabled={channel.welcome_enabled} –¥–ª—è –∫–∞–Ω–∞–ª–∞ ID={channel_id}"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

        await callback.message.edit_reply_markup(
            reply_markup=welcome_menu_keyboard(channel_id, channel.welcome_enabled)
        )
        await callback.answer(status)

    @router.callback_query(F.data.startswith("edit_welcome_text:"))
    async def edit_welcome_text(callback: types.CallbackQuery, state: FSMContext):
        channel_id = int(callback.data.split(":")[1])
        await state.set_state(WelcomeState.entering_text)
        await state.update_data(channel_id=channel_id)

        log_text = (
            f"‚úè @{callback.from_user.username} (ID: {callback.from_user.id}) –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "
            f"—Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∫–∞–Ω–∞–ª–∞ ID={channel_id}"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

        await callback.message.edit_text("‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:")
        await callback.answer()

    @router.message(WelcomeState.entering_text)
    async def save_welcome_text(message: types.Message, state: FSMContext):
        data = await state.get_data()
        channel_id = data["channel_id"]
        new_text = message.text.strip()

        async with async_session() as session:
            await session.execute(
                update(Channel).where(Channel.id == channel_id).values(welcome_message=new_text)
            )
            await session.commit()

        log_text = (
            f"üí¨ @{message.from_user.username} (ID: {message.from_user.id}) "
            f"–æ–±–Ω–æ–≤–∏–ª —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ ID={channel_id}\n"
            f"–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {new_text}"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data=f"channel_settings:{channel_id}")

        await message.answer("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=builder.as_markup())
        await state.clear()

    @router.callback_query(F.data.startswith("edit_welcome_button:"))
    async def edit_welcome_button(callback: types.CallbackQuery, state: FSMContext):
        channel_id = int(callback.data.split(":")[1])
        await state.set_state(WelcomeState.entering_button_text)
        await state.update_data(channel_id=channel_id)

        log_text = (
            f"üîò @{callback.from_user.username} (ID: {callback.from_user.id}) "
            f"–Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∫–∞–Ω–∞–ª–∞ ID={channel_id}"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

        await callback.message.edit_text("‚úè –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:")
        await callback.answer()

    @router.message(WelcomeState.entering_button_text)
    async def save_button_text(message: types.Message, state: FSMContext):
        await state.update_data(button_text=message.text.strip())
        log_text = (
            f"üîó @{message.from_user.username} (ID: {message.from_user.id}) "
            f"—É–∫–∞–∑–∞–ª —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: {message.text.strip()}"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

        await message.answer("üîó –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
        await state.set_state(WelcomeState.entering_button_url)

    @router.message(WelcomeState.entering_button_url)
    async def save_button_url(message: types.Message, state: FSMContext):
        data = await state.get_data()
        channel_id = data["channel_id"]
        button_text = data["button_text"]
        button_url = message.text.strip()

        async with async_session() as session:
            await session.execute(
                update(Channel).where(Channel.id == channel_id).values(
                    has_button=True,
                    button_text=button_text,
                    button_url=button_url,
                    button_type="inline"
                )
            )
            await session.commit()

        log_text = (
            f"üîó @{message.from_user.username} (ID: {message.from_user.id}) "
            f"–æ–±–Ω–æ–≤–∏–ª –∫–Ω–æ–ø–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: [{button_text}]({button_url}) –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

        await message.answer("‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        await state.clear()

    @router.callback_query(F.data.startswith("preview_welcome:"))
    async def preview_welcome_message(callback: types.CallbackQuery):
        channel_id = int(callback.data.split(":")[1])
        async with async_session() as session:
            result = await session.execute(select(Channel).where(Channel.id == channel_id))
            channel = result.scalar_one()

        log_text = (
            f"üëÄ @{callback.from_user.username} (ID: {callback.from_user.id}) "
            f"–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ ID={channel_id}"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

        if not channel.welcome_message:
            await callback.message.answer("‚Ñπ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ.")
            await callback.answer()
            return

        if channel.has_button:
            if channel.button_type == "inline":
                from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text=channel.button_text, url=channel.button_url)]]
                )
                await callback.message.answer(channel.welcome_message, reply_markup=kb)
            else:
                from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
                kb = ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text=channel.button_text)]],
                    resize_keyboard=True
                )
                await callback.message.answer(channel.welcome_message, reply_markup=kb)
        else:
            await callback.message.answer(channel.welcome_message)

        await callback.answer()

    return router
