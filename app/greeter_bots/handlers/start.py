from aiogram import types, Router
from aiogram.filters import Command
from sqlalchemy import select

from app.database.base.session import async_session
from app.database.models.channel import Channel
from app.greeter_bots.keyboards.main_menu import greeter_main_menu
from app.utils.logger import logger
from app.redis_queue.admin_logs import send_log_to_admin


def get_router() -> Router:
    router = Router()

    text = (
        "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –±–æ—Ç–∞!</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π –≤ –≤–∞—à–∏—Ö Telegram-–∫–∞–Ω–∞–ª–∞—Ö:\n\n"
        "‚Ä¢ <b>‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª</b> ‚Äî –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π, –∫–∞–ø—á–∏ –∏ —Ä–∞—Å—Å—ã–ª–æ–∫\n"
        "‚Ä¢ <b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞</b> ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n"
        "‚Ä¢ <b>üóí –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> ‚Äî —Å–ª–µ–¥–∏—Ç–µ, –∫—Ç–æ –≤—Å—Ç—É–ø–∏–ª, –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É –∏ –ø–æ–ª—É—á–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É\n\n"
        "<i>–ù–∏–∂–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ.</i>"
    )

    @router.message(Command("start"))
    async def start_handler(message: types.Message, bot_id: int):
        async with async_session() as session:
            result = await session.execute(select(Channel).where(Channel.bot_id == bot_id))
            channels = result.scalars().all()

        logger.info(
            f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} (ID: {message.from_user.id}) –∑–∞–ø—É—Å—Ç–∏–ª /start (bot_id={bot_id})"
        )
        await send_log_to_admin(
            f"üöÄ <code>{message.from_user.id}</code> –∑–∞–ø—É—Å—Ç–∏–ª <b>/start</b> –≤ Greeter-–±–æ—Ç–µ (bot_id={bot_id})"
        )

        await message.answer(
            text,
            reply_markup=greeter_main_menu(channels)
        )

    @router.callback_query(lambda c: c.data == "back_to_main_menu")
    async def back_to_main_menu_handler(callback: types.CallbackQuery, bot_id: int):
        async with async_session() as session:
            result = await session.execute(select(Channel).where(Channel.bot_id == bot_id))
            channels = result.scalars().all()

        logger.info(
            f"‚¨ÖÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (bot_id={bot_id})"
        )
        await send_log_to_admin(
            f"‚¨ÖÔ∏è <code>{callback.from_user.id}</code> –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Greeter-–±–æ—Ç–∞ (bot_id={bot_id})"
        )

        await callback.message.edit_text(
            text,
            reply_markup=greeter_main_menu(channels)
        )
        await callback.answer()

    return router
