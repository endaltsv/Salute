from aiogram import Router, types, F, Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select

from app.database.base.session import async_session
from app.database.models.channel import Channel
from app.database.models.member import ChannelMember
from app.greeter_bots.states.broadcast import BroadcastState
from app.redis_queue.broadcast import enqueue_broadcast_task
from app.utils.logger import logger
from app.redis_queue.admin_logs import send_log_to_admin  # <-- –î–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç –¥–ª—è –ª–æ–≥–æ–≤


def channel_selection_keyboard(channels, selected, all_selected=False):
    keyboard = []

    for ch in channels:
        check = "‚úÖ " if ch.id in selected else ""
        keyboard.append([
            InlineKeyboardButton(
                text=f"{check}{ch.channel_name or ch.channel_id}",
                callback_data=f"broadcast_toggle:{ch.id}"
            )
        ])

    all_check = "‚úÖ " if all_selected else ""
    keyboard.append([
        InlineKeyboardButton(text=f"{all_check}üì¢ –í—Å–µ –∫–∞–Ω–∞–ª—ã", callback_data="broadcast_all")
    ])

    # üëá –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –∏–ª–∏ all_selected
    if selected or all_selected:
        keyboard.append([
            InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast_start")
        ])
    else:
        keyboard.append([
            InlineKeyboardButton(text="üö´ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã", callback_data="noop")
        ])

    keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def yes_no_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="broadcast_add_button_yes")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="broadcast_add_button_no")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="broadcast_menu")]
    ])


def get_router() -> Router:
    router = Router()

    @router.callback_query(F.data == "broadcast_menu")
    async def broadcast_start(callback: types.CallbackQuery, state: FSMContext, bot_id: int):
        async with async_session() as session:
            result = await session.execute(select(Channel).where(Channel.bot_id == bot_id))
            channels = result.scalars().all()

        await state.update_data(channels=channels, selected=set(), all_selected=False, bot_id=bot_id)
        await state.set_state(BroadcastState.choosing_channels)

        await callback.message.edit_text(
            "üì¨ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:",
            reply_markup=channel_selection_keyboard(channels, set(), all_selected=False)
        )
        await callback.answer()

        log_text = (
            f"üì¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) "
            f"–æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏ (bot_id={bot_id})"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

    @router.callback_query(F.data.startswith("broadcast_toggle:"))
    async def toggle_channel(callback: types.CallbackQuery, state: FSMContext):
        channel_id = int(callback.data.split(":")[1])
        data = await state.get_data()
        selected = data.get("selected", set())
        channels = data["channels"]

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        if channel_id in selected:
            selected.remove(channel_id)
        else:
            selected.add(channel_id)

        await state.update_data(selected=selected, all_selected=False)
        await safe_edit_reply_markup(callback.message, channel_selection_keyboard(channels, selected, False))
        await callback.answer()

        log_text = (
            f"üîò –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) "
            f"{'–≤—ã–±—Ä–∞–ª' if channel_id not in selected else '—É–±—Ä–∞–ª'} –∫–∞–Ω–∞–ª ID {channel_id} –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

    @router.callback_query(F.data == "broadcast_all")
    async def select_all_channels(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        channels = data["channels"]

        await state.update_data(selected=set(), all_selected=True)
        await safe_edit_reply_markup(callback.message, channel_selection_keyboard(channels, set(), True))
        await callback.answer()

        log_text = (
            f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) –≤—ã–±—Ä–∞–ª '–í—Å–µ –∫–∞–Ω–∞–ª—ã' –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

    @router.callback_query(F.data == "broadcast_start")
    async def ask_message(callback: types.CallbackQuery, state: FSMContext):
        await state.set_state(BroadcastState.entering_message)
        await callback.message.edit_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤ –∏ —Ç.–¥.). "
            "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–∞–∫ HTML."
        )
        await callback.answer()

        log_text = (
            f"‚úçÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) "
            f"–ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

    @router.message(BroadcastState.entering_message)
    async def save_message_and_ask_button(message: types.Message, state: FSMContext):
        await state.update_data(text=message.html_text)  # ‚úÖ —Å–æ—Ö—Ä–∞–Ω—è–µ–º HTML-–≤–µ—Ä—Å–∏—é —Ç–µ–∫—Å—Ç–∞
        await state.set_state(BroadcastState.ask_add_button)

        await message.answer(
            "üîò –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é?",
            reply_markup=yes_no_keyboard()
        )

        log_text = (
            f"üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} (ID: {message.from_user.id}) "
            f"–≤–≤—ë–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

    @router.callback_query(F.data == "broadcast_add_button_yes")
    async def ask_button_text(callback: types.CallbackQuery, state: FSMContext):
        await state.set_state(BroadcastState.entering_button_text)
        await callback.message.edit_text("üî§ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:")
        await callback.answer()

        log_text = (
            f"‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) "
            f"—Ä–µ—à–∏–ª –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∫ —Ä–∞—Å—Å—ã–ª–∫–µ"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

    @router.message(BroadcastState.entering_button_text)
    async def save_button_text(message: types.Message, state: FSMContext):
        await state.update_data(button_text=message.text)
        await state.set_state(BroadcastState.entering_button_url)
        await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:")

    @router.message(BroadcastState.entering_button_url)
    async def start_broadcast_with_button(message: types.Message, state: FSMContext, bot: Bot):
        await state.update_data(button_url=message.text)
        data = await state.get_data()
        await finish_broadcast(bot, message, data)
        await state.clear()

        log_text = (
            f"üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} (ID: {message.from_user.id}) "
            f"–∑–∞–¥–∞–ª –∫–Ω–æ–ø–∫—É –∫ —Ä–∞—Å—Å—ã–ª–∫–µ: —Ç–µ–∫—Å—Ç='{message.text}'"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

    @router.callback_query(F.data == "broadcast_add_button_no")
    async def start_broadcast_without_button(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
        data = await state.get_data()
        await finish_broadcast(bot, callback.message, data)
        await callback.answer()
        await state.clear()

        log_text = (
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∫–Ω–æ–ø–∫–∏"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

    async def finish_broadcast(bot: Bot, message: types.Message, data: dict):
        text = data["text"]
        button_text = data.get("button_text")
        button_url = data.get("button_url")
        all_selected = data.get("all_selected", False)
        bot_id = data.get("bot_id")

        async with async_session() as session:
            if all_selected:
                result = await session.execute(select(Channel).where(Channel.bot_id == bot_id))
            else:
                result = await session.execute(select(Channel).where(Channel.id.in_(data["selected"])))
            channels = result.scalars().all()
            channel_ids = [ch.id for ch in channels]

            members_result = await session.execute(
                select(ChannelMember.user_id).where(
                    ChannelMember.channel_id.in_(channel_ids),
                    ChannelMember.bot_id == bot_id,
                    ChannelMember.is_available_for_broadcast.is_(True)  # ‚úÖ –¢–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
                )
            )

            user_ids = {row[0] for row in members_result.fetchall()}

        # üîÅ –í–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî –∫–ª–∞–¥—ë–º –∑–∞–¥–∞—á—É –≤ Redis
        await enqueue_broadcast_task(
            bot_id=bot_id,
            text=text,
            user_ids=list(user_ids),
            button_text=button_text,
            button_url=button_url,
            response_chat_id=message.chat.id,
            response_message_id=message.message_id
        )

        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨Ö –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")

        await message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ. –í—Å–µ–≥–æ –≤ –±–æ—Ç–µ: {len(user_ids)}. "
            f"–û–∂–∏–¥–∞–π—Ç–µ ‚è≥",
            reply_markup=builder.as_markup()
        )

        log_text = (
            f"üöÄ –ó–∞–ø—É—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ (bot_id={bot_id}) | –∫–∞–Ω–∞–ª–æ–≤: {len(channel_ids)} | –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)} "
            f"| –∫–Ω–æ–ø–∫–∞: {'–¥–∞' if button_text and button_url else '–Ω–µ—Ç'}"
        )
        await send_log_to_admin(log_text)
        logger.info(log_text)

    async def safe_edit_reply_markup(message: types.Message, markup: InlineKeyboardMarkup):
        try:
            await message.edit_reply_markup(reply_markup=markup)
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise e

    return router
