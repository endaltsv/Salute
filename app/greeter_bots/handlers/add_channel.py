from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.database.base.session import async_session
from app.greeter_bots.keyboards.channel_settings import channel_settings_keyboard
from app.greeter_bots.states.add_channel import AddChannelState
from app.database.models.channel import Channel
from app.redis_queue.admin_logs import send_log_to_admin


def get_router() -> Router:
    router = Router()

    @router.callback_query(F.data == "add_channel")
    async def add_channel_start(callback: types.CallbackQuery, state: FSMContext):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
        ])
        await callback.message.answer(
            "üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.",
            reply_markup=keyboard
        )
        await state.set_state(AddChannelState.waiting_for_channel)

        await send_log_to_admin(
            f"‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"
        )

        await callback.answer()

    @router.message(AddChannelState.waiting_for_channel)
    async def process_channel(message: types.Message, state: FSMContext, bot_id: int):
        if message.forward_from_chat:
            channel_id = str(message.forward_from_chat.id)
            channel_name = message.forward_from_chat.title
        else:
            channel_id = message.text.strip()
            channel_name = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

        async with async_session() as session:
            exists = await session.execute(
                Channel.__table__.select().where(
                    Channel.channel_id == channel_id,
                    Channel.bot_id == bot_id
                )
            )
            if exists.first():
                await message.answer("‚ö† –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
                await send_log_to_admin(
                    f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} (ID: {message.from_user.id}) "
                    f"–ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª {channel_id} –≤ –±–æ—Ç–∞ ID {bot_id}",
                    level="warning"
                )
                await state.clear()
                return

            channel = Channel(
                bot_id=bot_id,
                channel_id=channel_id,
                channel_name=channel_name,
                welcome_message=""
            )
            session.add(channel)
            await session.commit()

            await send_log_to_admin(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} (ID: {message.from_user.id}) –¥–æ–±–∞–≤–∏–ª –∫–∞–Ω–∞–ª "
                f"{channel_name} (ID: {channel_id}) –≤ –±–æ—Ç–∞ ID {bot_id}"
            )

            await message.answer(
                f"<b>‚úÖ –ö–∞–Ω–∞–ª <u>{channel_name}</u> –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞:\n\n"
                "‚Ä¢ <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –∫–∞–Ω–∞–ª\n"
                "‚Ä¢ <b>–ê–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ</b> ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏–π –∑–∞—è–≤–æ–∫ –≤ –∫–∞–Ω–∞–ª\n"
                "‚Ä¢ <b>–ö–∞–ø—á–∞</b> ‚Äî –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —á–µ–ª–æ–≤–µ–∫ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –±–∞–∑—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫\n"
                "‚Ä¢ <b>–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª</b> ‚Äî —É–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ –±–æ—Ç–∞ –∏ –±–∞–∑—ã\n"
                "‚Ä¢ <b>–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤",
                reply_markup=channel_settings_keyboard(channel)
            )

        await state.clear()

    return router
