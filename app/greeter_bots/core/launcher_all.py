import os
import subprocess
import logging
import sys
from sqlalchemy import select
from app.database.base.session import async_session
from app.database.models.bot import Bot as BotModel

logger = logging.getLogger(__name__)


async def launch_all_greeter_bots():
    async with async_session() as session:
        result = await session.execute(select(BotModel))
        bots = result.scalars().all()

        if not bots:
            logger.info("üì≠ –ù–µ—Ç greeter-–±–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")
            return

        logger.info(f"üöÄ –ù–∞–π–¥–µ–Ω–æ {len(bots)} greeter-–±–æ—Ç–æ–≤. –ó–∞–ø—É—Å–∫–∞–µ–º...")

        for bot in bots:
            try:
                env = os.environ.copy()
                env["BOT_TOKEN"] = bot.token

                # ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ Python, —á—Ç–æ –∏ —É main_bot
                python_executable = sys.executable  # –ø—É—Ç—å –¥–æ .venv/bin/python –∏–ª–∏ Scripts/python.exe

                subprocess.Popen(
                    [python_executable, "greeter_runner.py"],  # –ø—É—Ç—å –∫ runner
                    env=env
                )
                logger.info(f"‚úÖ Greeter-–±–æ—Ç @{bot.name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å.")
            except Exception as e:
                logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ @{bot.name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}: {e}")
