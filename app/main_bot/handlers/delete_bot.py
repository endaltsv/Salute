from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, delete
from app.database.base.session import async_session
from app.database.models.bot import Bot as BotModel
from app.database.models.channel import Channel
from app.database.models.member import ChannelMember
import psutil
import os
import signal

from app.utils.logger import logger

router = Router()


@router.callback_query(F.data.startswith("delete_bot:"))
async def delete_bot(callback: types.CallbackQuery, state: FSMContext):
    bot_id = int(callback.data.split(":")[1])

    async with async_session() as session:
        result = await session.execute(select(BotModel).where(BotModel.id == bot_id))
        bot = result.scalar_one_or_none()

        if not bot:
            await callback.message.answer("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            logger.warning(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞ —Å ID {bot_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
            return

        token = bot.token
        username = bot.name

        logger.info(f"üîÑ –ù–∞—á–∞—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ @{username} (ID: {bot_id}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")

        # üßπ 1. –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ —ç—Ç–æ–≥–æ –±–æ—Ç–∞
        result = await session.execute(select(Channel).where(Channel.bot_id == bot.id))
        channels = result.scalars().all()
        channel_ids = [ch.id for ch in channels]

        if channel_ids:
            await session.execute(delete(ChannelMember).where(ChannelMember.channel_id.in_(channel_ids)))
            logger.info(f"üßº –£–¥–∞–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {channel_ids} (–±–æ—Ç @{username})")

        # üßπ 2. –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞
        await session.execute(delete(Channel).where(Channel.bot_id == bot.id))
        logger.info(f"üì§ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞ @{username}")

        # üßπ 3. –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
        await session.delete(bot)
        await session.commit()
        logger.info(f"‚úÖ –ë–æ—Ç @{username} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã (ID: {bot_id})")

        # üõë 4. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º greeter-–ø—Ä–æ—Ü–µ—Å—Å
        killed = kill_process_by_token(token)
        if killed:
            logger.info(f"üõë Greeter-–ø—Ä–æ—Ü–µ—Å—Å @{username} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            logger.warning(f"‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è @{username} (token –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤)")

        await callback.message.answer(f"‚úÖ –ë–æ—Ç @{username} —É–¥–∞–ª—ë–Ω.")
        await callback.answer()



def kill_process_by_token(token: str) -> bool:
    """–£–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å, –≥–¥–µ –≤ env –∑–∞–¥–∞–Ω BOT_TOKEN"""
    for proc in psutil.process_iter(['pid', 'name', 'environ']):
        try:
            env = proc.environ()
            if env.get("BOT_TOKEN") == token:
                os.kill(proc.pid, signal.SIGTERM)
                return True
        except (psutil.AccessDenied, psutil.NoSuchProcess):
            continue
    return False
