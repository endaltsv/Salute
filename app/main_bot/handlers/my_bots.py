from aiogram import Router, types, F
from sqlalchemy import select
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.database.base.session import async_session
from app.database.models.user import User
from app.database.models.bot import Bot as BotModel
from app.utils.logger import logger

router = Router()


@router.callback_query(F.data == "my_bots")
async def process_my_bots(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username

    async with async_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()

        if not user:
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–±—è –≤ –±–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π /start.")
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫—Ä—ã—Ç—å '–ú–æ–∏ –±–æ—Ç—ã'")
            await callback.answer()
            return

        result = await session.execute(
            select(BotModel).where(BotModel.owner_id == user.id)
        )
        bots = result.scalars().all()

    logger.info(f"üìÇ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) –æ—Ç–∫—Ä—ã–ª —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ –±–æ—Ç—ã' (–Ω–∞–π–¥–µ–Ω–æ: {len(bots)})")

    if not bots:
        await callback.message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞.")
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                *[
                    [InlineKeyboardButton(text=f"ü§ñ @{bot.name}", callback_data=f"bot_menu:{bot.id}")]
                    for bot in bots
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")]
            ]
        )
        await callback.message.answer("<b>–í—ã–±–µ—Ä–∏ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: üëá</b>", reply_markup=keyboard)

    await callback.answer()


@router.callback_query(F.data.startswith("bot_menu:"))
async def bot_menu(callback: types.CallbackQuery):
    bot_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    username = callback.from_user.username

    async with async_session() as session:
        result = await session.execute(select(BotModel).where(BotModel.id == bot_id))
        bot = result.scalar_one_or_none()

    if not bot:
        await callback.message.answer("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        logger.warning(f"‚ùå –ë–æ—Ç —Å ID {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id})")
        await callback.answer()
        return

    logger.info(
        f"‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –±–æ—Ç–∞ @{bot.name} (ID: {bot_id})"
    )

    text = f"‚öô <b>–ú–µ–Ω—é –±–æ—Ç–∞:</b> @{bot.name}\n\n" \
           f"üîπ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤–Ω—É—Ç—Ä–∏ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞.\n" \
           f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é."

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û° –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É", url=f"https://t.me/{bot.name}?start=go")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞", callback_data=f"delete_bot:{bot_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="my_bots")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()
