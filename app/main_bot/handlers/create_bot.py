# app/main_bot/handlers/create_bot.py
import os
import subprocess
import sys

from aiogram import Router, types, F, Bot
from aiogram.fsm.context import FSMContext

from app.greeter_bots.core.launcher import run_greeter_bot
from app.main_bot.states.create_bot import CreateBotState
from app.database.base.session import async_session
from app.database.models.bot import Bot as BotModel
from app.database.models.user import User
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramUnauthorizedError, TelegramBadRequest
from sqlalchemy import select
import asyncio

from app.utils.logger import logger

router = Router()


@router.callback_query(F.data == "create_bot")
async def process_create_bot_button(callback: types.CallbackQuery, state: FSMContext):
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ü–µ—Ä–µ–¥—É–º–∞–ª", callback_data="back_to_main_menu")]
    ])

    await callback.message.answer(
        "<b>üîê –í–≤–µ–¥–∏—Ç–µ API —Ç–æ–∫–µ–Ω –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞</b>\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–≤–æ–µ–≥–æ Telegram-–±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ <b>—Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞</b>, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç <a href='https://t.me/BotFather'>@BotFather</a>.\n\n"
        "üìå <b>–ì–¥–µ –≤–∑—è—Ç—å —Ç–æ–∫–µ–Ω?</b>\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <a href='https://t.me/BotFather'>@BotFather</a>\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/newbot</code>\n"
        "3. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –∏ —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ API —Ç–æ–∫–µ–Ω (–≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–∑ —Ü–∏—Ñ—Ä –∏ –±—É–∫–≤)\n\n"
        "‚ö†Ô∏è <b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b>\n"
        "‚Ä¢ <i>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç –±–æ—Ç–æ–≤ –ø–æ—Å—Ç–∏–Ω–≥–∞ –∏–ª–∏ —Ä–∞—Å—Å—ã–ª–æ–∫) ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å –∏—Ö —Ä–∞–±–æ—Ç—É.</i>\n"
        "‚Ä¢ <i>–ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–æ–≤ ‚ÄúTelegram‚Äù –∏–ª–∏ ‚Äú–¢–µ–ª–µ–≥—Ä–∞–º‚Äù –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.</i>\n"
        "‚Ä¢ <i>–ù–µ —Å—Ç–∞–≤—å—Ç–µ –ª–æ–≥–æ—Ç–∏–ø Telegram (—Å–∞–º–æ–ª—ë—Ç–∏–∫) –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫—É ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏.</i>\n\n"
        "<b>–í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∏–∂–µ, –∏ —è –ø–æ–¥–∫–ª—é—á—É –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º—É.</b>üëá",
        reply_markup=cancel_keyboard,
        disable_web_page_preview=True
    )

    await state.set_state(CreateBotState.waiting_for_token)
    await callback.answer()

    logger.info(
        f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: {callback.from_user.id}) "
        f"ü§ñ –•–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞"
    )


@router.message(CreateBotState.waiting_for_token)
async def process_token(message: types.Message, state: FSMContext):
    token = message.text.strip()
    new_bot = None  # üëà –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞—Ä–∞–Ω–µ–µ

    back_to_main_menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
    ])

    try:
        new_bot = Bot(token=token)
        bot_info = await new_bot.get_me()
    except TelegramUnauthorizedError:
        await message.answer("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=back_to_main_menu_keyboard)
        logger.warning(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        return
    except TelegramBadRequest as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {str(e)}", reply_markup=back_to_main_menu_keyboard)
        logger.warning(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ get_me(): {e}")
        return
    except Exception as e:
        await message.answer("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞.", reply_markup=back_to_main_menu_keyboard)
        logger.exception(
            f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞!\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: {message.from_user.id})\n"
            f"üì¶ –¢–æ–∫–µ–Ω: {token[:5]}... (–æ–±—Ä–µ–∑–∞–Ω)\n"
            f"‚ö† –û—à–∏–±–∫–∞: {e}"
        )
        return
    finally:
        if new_bot:
            await new_bot.session.close()

    if not getattr(bot_info, "is_bot", False):
        await message.answer("‚ùå –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ù–ï –±–æ—Ç—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather.", reply_markup=back_to_main_menu_keyboard)
        logger.warning(f"‚ùå –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—Ç get_me() –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º: {bot_info}")
        return

    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ —Å /start.")
            logger.error(f"‚ùå User {message.from_user.id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users.")
            await state.clear()
            return

        result = await session.execute(select(BotModel).where(BotModel.token == token))
        existing = result.scalar_one_or_none()
        if existing:
            await message.answer("‚ö† –¢–∞–∫–æ–π –±–æ—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=back_to_main_menu_keyboard)
            await state.clear()
            return

        bot_entry = BotModel(
            token=token,
            name=bot_info.username,
            owner_id=user.id,
        )
        session.add(bot_entry)
        await session.commit()
        bot_id = bot_entry.id  # –ø–æ–ª—É—á–∞–µ–º ID –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞

    # üü¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ greeter_bot
    await message.answer(f"‚úÖ –ë–æ—Ç @{bot_info.username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω!", reply_markup=back_to_main_menu_keyboard)

    # üì≤ –ü–µ—Ä–µ—Ö–æ–¥ –≤ bot_menu
    text = f"‚öô <b>–ú–µ–Ω—é –±–æ—Ç–∞:</b> @{bot_info.username}\n\n" \
           f"üîπ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤–Ω—É—Ç—Ä–∏ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞.\n" \
           f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é."

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û° –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É", url=f"https://t.me/{bot_info.username}?start=go")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="my_bots")]
    ])
    await message.answer(text, reply_markup=keyboard)

    # ‚¨áÔ∏è –∑–∞–ø—É—Å–∫–∞–µ–º greeter_runner.py —á–µ—Ä–µ–∑ subprocess
    subprocess.Popen(
        [sys.executable, "greeter_runner.py"],
        env={**os.environ, "BOT_TOKEN": token},
        # üëá –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–≤—è–∑–∞—Ç—å greeter-–±–æ—Ç–∞ –æ—Ç main_bot (Windows only)
        # creationflags=subprocess.DETACHED_PROCESS | subprocess.CREATE_NEW_PROCESS_GROUP
    )

    # üì¶ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker (–ø–æ–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
    # subprocess.Popen([
    #     "docker", "run", "--rm",
    #     "-e", f"BOT_TOKEN={token}",
    #     "salute_greeter:latest"
    # ])

    logger.info(
        f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} (ID: {message.from_user.id}) "
        f"—Å–æ–∑–¥–∞–ª Greeter-–±–æ—Ç–∞: @{bot_info.username} (ID: {bot_info.id})"
    )

    await state.clear()
