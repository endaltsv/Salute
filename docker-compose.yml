version: '3.8'

services:
  main:
    image: salute_main
    build: .
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    command: sh -c "sleep 5 && python main.py"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  migrations:
    image: salute_migrations
    build: .
    depends_on:
      - postgres
    env_file:
      - .env
    volumes:
      - .:/app
    entrypoint: [ "alembic" ]
    command: upgrade head
    deploy:
      replicas: 1
      restart_policy:
        condition: none

  join_worker:
    image: salute_manager
    build: .
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    command: sh -c "sleep 5 && python workers/join_worker/worker.py"
    deploy:
      replicas: 5
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  broadcast_worker:
    image: salute_manager
    build: .
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    command: sh -c "sleep 5 && python workers/broadcast_worker/worker.py"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  log_worker:
    image: salute_manager
    build: .
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    command: sh -c "sleep 5 && python workers/log_worker/worker.py"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  postgres:
    image: postgres:15
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

volumes:
  postgres_data:
  redis_data:
