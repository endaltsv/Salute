# workers/join_worker/worker.py

import asyncio
import json
import os
import time
from typing import Dict, List

from app.redis_queue.connection import redis
from app.utils.logger import logger
from workers.join_worker.services.join_handler import handle_join

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
BATCH_SIZE = 20  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞—á–∫–∏
BATCH_TIMEOUT = 1  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379")


async def heartbeat(name: str):
    await redis.set(f"worker_status:{name}", int(time.time()))


async def process_batch(tasks: List[Dict]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—á–∫–∏ –∑–∞–¥–∞—á"""
    if not tasks:
        return

    logger.info(f"üì¶ Processing batch of {len(tasks)} tasks")
    for task in tasks:
        asyncio.create_task(handle_join(task))


async def main():
    logger.info(f"üöÄ Join worker started... (Redis: {REDIS_URL})")
    tasks_buffer = []
    last_batch_time = time.time()

    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            task = await redis.blpop("join_queue", timeout=0.1)

            if task:
                _, data = task
                payload = json.loads(data)
                tasks_buffer.append(payload)

                # –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–¥–∞—á –∏–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
                current_time = time.time()
                if len(tasks_buffer) >= BATCH_SIZE or (
                    tasks_buffer and current_time - last_batch_time >= BATCH_TIMEOUT
                ):
                    await process_batch(tasks_buffer)
                    tasks_buffer = []
                    last_batch_time = current_time
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á, –Ω–æ –µ—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
                if tasks_buffer:
                    await process_batch(tasks_buffer)
                    tasks_buffer = []
                    last_batch_time = time.time()

            # –ü—É–ª—å—Å –≤—Å–µ–≥–¥–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á
            await heartbeat("join_worker:base")

        except Exception as e:
            logger.error(f"üî• Error in worker loop: {e}")
            await asyncio.sleep(1)


if __name__ == "__main__":
    asyncio.run(main())
